apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "xxxxxx"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('../keystore/release.keystore')
            storePassword getProperty('store.password', 'STORE_PASSWORD')
            keyAlias getProperty('store.key.alias', 'KEY_ALIAS')
            keyPassword getProperty('store.key.password', 'KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        travis {
            initWith release
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = String.format('%s_%s_%s_%s.apk', 'Pretty', getVersionName(), getDate(), variant.buildType.name)
        }
    }
}

def getDate() {
    return new Date().format('yyyyMMdd', TimeZone.getTimeZone('GMT+8'))
}

def getVersionName() {
    return 'v' + android.defaultConfig.versionName
}

def getProperty(String propertyName, String envName) {
    try {
        def property = project.hasProperty(propertyName) ? project.property(propertyName) : System.getenv(envName)
        if (property == null) {
            throw new NullPointerException();
        }
        return property
    } catch (Throwable ignored) {
        def message = String.format('********************************************************************************\n' +
                'You need define %s in gradle.properties or set environment variable: %s\n' +
                '********************************************************************************\n', propertyName, envName)
        throw new RuntimeException(message)
    }
}

dependencies {
    implementation "com.android.support:appcompat-v7:$support_library_version"

   //把implementation 用api代替,它是对外部公开的, 所有其他的module就不需要添加该依赖
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api rootProject.ext.dependencies["appcompat_v7"]
    api rootProject.ext.dependencies["constraint_layout"]
    api rootProject.ext.dependencies["cardview-v7"]
    api rootProject.ext.dependencies["recyclerview-v7"]
    api rootProject.ext.dependencies["support-v4"]
    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["support_annotations"]
    
     //MultiDex分包方法
    api rootProject.ext.dependencies["multidex"]
    //Arouter路由
    annotationProcessor rootProject.ext.dependencies["arouter_compiler"]
    api rootProject.ext.dependencies["arouter_api"]
    api rootProject.ext.dependencies["arouter_annotation"]
    //dagger    annotationProcessor代替apt
    // api rootProject.ext.dependencies["dagger"]
    //annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    // api rootProject.ext.dependencies["javax-annotation"]
    //网络
    api rootProject.ext.dependencies["retrofit2"]
    api rootProject.ext.dependencies["converter-gson"]
    api rootProject.ext.dependencies["adapter-rxjava2"]
    api rootProject.ext.dependencies["rxjava2:rxandroid"]
    api rootProject.ext.dependencies["rxjava2"]
    api rootProject.ext.dependencies["logging-interceptor"]
    //黄油刀
    annotationProcessor rootProject.ext.dependencies["butterknife_compiler"]
    api rootProject.ext.dependencies["butterknife"]
    //日志
    api rootProject.ext.dependencies["logger"]
    //仿ios进度条
    //api rootProject.ext.dependencies["kprogresshud"]
    //6.0权限
    api rootProject.ext.dependencies["permissionsdispatcher"]
    api rootProject.ext.dependencies["baseRecyclerViewAdapterHelper"]
    //图片
    api rootProject.ext.dependencies["glide"]
    //图片选择器 导致夜神在模拟器打不开
    api rootProject.ext.dependencies["PictureSelector"]
    //图片缩放,View Pager中浏览库
    api rootProject.ext.dependencies["photoview"]
    //仿ios 的PickerView时间选择器和条件选择器
    api rootProject.ext.dependencies["pickerView"]
    //上拉加载
    api rootProject.ext.dependencies["smartRefreshLayout"]
    api rootProject.ext.dependencies["SmartRefreshHeader"]
    //eventbus 发布/订阅事件总线
    api rootProject.ext.dependencies["eventbus"]
    //banner轮播图
    api rootProject.ext.dependencies["banner"]
    //RecyclerView万能适配器
    api rootProject.ext.dependencies["baseRecyclerViewAdapterHelper"]
    //Android屏幕适配
    api rootProject.ext.dependencies["autolayout"]
    //安卓调试神器-Stetho
    api rootProject.ext.dependencies["stetho"]
    api rootProject.ext.dependencies["stetho-okhttp3"]
    //bugly sdk
    api rootProject.ext.dependencies["tencent-bugly"]
    //节操播放器
    api rootProject.ext.dependencies["jiecao"]


    implementation project(':component_data')
    implementation project(':baseLib:kprogresshud')
}

